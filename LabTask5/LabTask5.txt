 

Міністерство освіти і науки України     
Харківський національний університет радіоелектроніки     
     
     
Кафедра програмної інженерії     
     
       
      
Звіт до лабораторної роботи №5   з дисципліни  «Програмування під   
Аndrоіd»     
     
     
    
    
    
Виконала:                                                                          Прийняв:   ст. гр. ПЗПІ23-4                                                       ст. викл.  Сокорчук І. П.    Алєксєєва К. С.                Харків 2024   

 
  
1. Завдання   
Розробити застосунок для ведення нотаток.   
2. Хід роботи    
   Створюємо клас DBHelper, який наслідує SQLiteOpenHelper.

public class DBHelper extends SQLiteOpenHelper {


    public DBHelper(@Nullable Context context, @Nullable String name, @Nullable SQLiteDatabase.CursorFactory factory, int version) {
        super(context, name, factory, version);
    }

    @SuppressLint("SQLiteString")
    @Override
    public void onCreate(SQLiteDatabase db) {
        db.execSQL("CREATE TABLE notes(number INTEGER PRIMARY KEY AUTOINCREMENT, title TEXT, description TEXT," +
                " importance INTEGER, event_date TEXT, event_time TEXT, creation_date TEXT, image_data BLOB)");
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {

    }

    public void Drop(){
        SQLiteDatabase db = getWritableDatabase();
        db.execSQL("DROP TABLE notes");
        onCreate(db);
    }

    public void onInsert(String title, String description, int importance, String eventDate, String eventTime, String creationDate, byte[] imageData){
        SQLiteDatabase db = getWritableDatabase();
        ContentValues contentValues = CreateNote(title, description, importance, eventDate, eventTime, creationDate, imageData);
        db.insert("notes", null, contentValues);
    }

    public void onUpdate(int number, String title, String description, int importance, String eventDate, String eventTime, String creationDate, byte[] imageData){
        SQLiteDatabase db = getWritableDatabase();
        ContentValues contentValues = CreateNote(title, description, importance, eventDate, eventTime, creationDate, imageData);
        db.update("notes", contentValues, "number = ?", new String[]{String.valueOf(number)});
    }

    public ContentValues CreateNote(String title, String description, int importance, String eventDate, String eventTime, String creationDate, byte[] imageData){
        ContentValues contentValues = new ContentValues();
        contentValues.put("title", title);
        contentValues.put("description", description);
        contentValues.put("importance", importance);
        contentValues.put("event_date", eventDate);
        contentValues.put("event_time", eventTime);
        contentValues.put("creation_date", creationDate);
        contentValues.put("image_data", imageData);
        return contentValues;
    }

    public void onDelete(int number){
        SQLiteDatabase db = getWritableDatabase();
        db.delete("notes", "number = ?", new String[]{String.valueOf(number)});
    }

    public Cursor onSelect(){
        SQLiteDatabase db = this.getReadableDatabase();
        return db.query("notes", null, null, null, null, null, null);
    }

    public Cursor Filter(String title, String description, boolean importance, int importanceLayer){
        SQLiteDatabase db = this.getReadableDatabase();
        String query = "SELECT * FROM notes WHERE (title LIKE ? OR description LIKE ?)";
        String[] selectionArgs = new String[]{"%" + title + "%", "%" + description + "%"};
        if (importance){
            query += "AND importance = ?";
            selectionArgs = new String[]{"%" + title + "%", "%" + description + "%", String.valueOf(importanceLayer)};
        }
        return db.rawQuery(query, selectionArgs);
    }
}
ImportanceItem 
Цей клас представляє елемент для спінера (вибір важливості нотатки). Кожен елемент має: title — назву важливості (наприклад, низька, середня, висока). imageResId — ресурс іконки, що відображає важливість. 
 
public class ImportanceItem{     private String title;     private Integer imageResId; 
 
    public ImportanceItem(String title, Integer imageResId){         this.title = title; 
        this.imageResId = imageResId; 
    } 
 
    public String GetTitle(){         return title; 
    } 
 
    public Integer GetImageResId(){ 
        return imageResId; 
    } 
} 
 (new View.OnClickListener() { 
            @Override 
            public void onClick(View v){ 
                LayoutInflater inflater = getLayoutInflater(); 
                View dialogView = inflater.inflate(R.layout.custom_dialog, null); 
                EditText editText = 
dialogView.findViewById(R.id.customDialogInput); 
                AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);                 builder.setView(dialogView) 
                        .setPositiveButton("OK", new DialogInterface.OnClickListener() {                             @Override 
                            public void onClick(DialogInterface dialog, int which) {                                 textView.setText(editText.getText().toString()); 
                            } 
                        }) 
                        .setNegativeButton("Cancel", new 
DialogInterface.OnClickListener() { 
                            @Override 
                            public void onClick(DialogInterface dialog, int which) { 
 
                            } 
                        }); 
                builder.create().show(); 
            } 
        }); 
 
        Button moveToActivityHandlerPractice = findViewById(R.id.activityHandlerPractice); 
        moveToActivityHandlerPractice.setOnClickListener(new 
View.OnClickListener() { 
            @Override 
            public void onClick(View v) { 
                Intent intent = new Intent(MainActivity.this, HandlerPractice.class);                 startActivity(intent); 
            } 
        }); 
        Button moveToRecyclerViewAdapterPractice = findViewById(R.id.recyclerViewAdapterPractice); 
        moveToRecyclerViewAdapterPractice.setOnClickListener(new 
View.OnClickListener() { 
            @Override 
            public void onClick(View v) { 
                Intent intent = new Intent(MainActivity.this, 
RecyclerViewAdapterPractice.class); 
                startActivity(intent); 
            } 
        }); 
    } 
} 
 
2. Note 
 
Цей клас описує структуру даних нотатки. Кожна нотатка має кілька полів, таких як: number – унікальний ідентифікатор нотатки. title – назва нотатки. description – опис нотатки. importance – рівень важливості нотатки. eventDate і eventTime – дата та час події. creationDate – дата створення нотатки. imageData – бінарні дані зображення, що асоціюється з нотаткою. 
public class Note { 
 
    private int number; 
 
    private String title; 
 
    private String description; 
 
    private int importance; 
 
    private String eventDate; 
 
    private String eventTime; 
 
    private String creationDate; 
 
    private byte[] imageData; 
 
    public Note(int number, String title, String description, int importance, String eventDate, String eventTime, String creationDate, byte[] imageData){         this.number = number; 
        this.title = title; 
        this.description = description;         this.importance = importance;         this.eventDate = eventDate;         this.eventTime = eventTime;         this.creationDate = creationDate; 
        this.imageData = imageData; 
    } 
 
    public String getTitle() { 
        return title; 
    } 
 
    public String getDescription() { 
        return description; 
    } 
 
    public int getImportance() { 
        return importance; 
    } 
 
    public String getEventDate() { 
        return eventDate; 
    } 
 
    public String getEventTime() { 
        return eventTime; 
    } 
 
    public String getCreationDate() { 
        return creationDate; 
    } 
 
    public byte[] getImageData() { 
        return imageData; 
    } 
 
    public int getNumber() { 
        return number; 
    } 
} 
 
3. AddEditNoteActivity 
Цей клас реалізує активність для створення та редагування нотаток. Він дозволяє користувачеві вводити текст, вибирати дату, час, важливість, а також додавати зображення. 
Основні моменти: 
• Ініціалізація елементів інтерфейсу (Button, EditText, Spinner для вибору важливості, тощо). 
• Вибір зображення: реалізується через chooseImageButton, який відкриває галерею та зберігає вибране зображення в бінарному форматі. 
• Кнопка "Створити/Редагувати": зберігає або редагує нотатку в базі даних або внутрішній колекції. 
• Дата та час: через діалоги користувач може вибрати дату та час події. • Редагування та перегляд: дозволяє редагувати існуючі нотатки або переглядати їх. 
•  
public class AddEditNoteActivity extends AppCompatActivity { 
    ImageView iconImageView;     List<Note> notes;     byte[] imageBytes; 
    Notes Notes;     @Override 
    protected void onCreate(Bundle savedInstanceState) { 
        super.onCreate(savedInstanceState);         EdgeToEdge.enable(this); 
        setContentView(R.layout.activity_create_and_edit_note); 
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> { 
            Insets systemBars = 
insets.getInsets(WindowInsetsCompat.Type.systemBars()); 
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom); 
            return insets; 
        }); 
        Notes = ((NotesApplication) getApplication()).GetNotes(); 
        Button createOrEditButton = findViewById(R.id.createOrEditButton); 
        EditText titleEditTextButton = findViewById(R.id.titleEditText); 
        EditText descriptionEditTextButton = findViewById(R.id.descriptionEditText); 
        Spinner importanceSpinner = findViewById(R.id.importanceSpinner);         List<ImportanceItem> importanceItems = new ArrayList<>();         importanceItems.add(new 
ImportanceItem(getString(R.string.lowImportance), 
R.drawable.baseline_low_priority_24));         importanceItems.add(new 
ImportanceItem(getString(R.string.mediumImportance), 
R.drawable.baseline_checklist_24)); 
        importanceItems.add(new 
ImportanceItem(getString(R.string.highImportance), 
R.drawable.baseline_priority_high_24)); 
        ImportanceAdapter importanceAdapter = new 
ImportanceAdapter(AddEditNoteActivity.this, importanceItems);         importanceSpinner.setAdapter(importanceAdapter);         EditText editTextDate = findViewById(R.id.editTextDate); 
        EditText editTextTime = findViewById(R.id.editTextTime); 
        Button chooseImageButton = findViewById(R.id.chooseImageButton); 
        Button cancleButton = findViewById(R.id.cancleButton);         iconImageView = findViewById(R.id.iconImageView);         notes = Notes.getNotes(); 
 
        cancleButton.setOnClickListener(new View.OnClickListener() { 
            @Override 
            public void onClick(View v) { 
                setResult(RESULT_CANCELED);                 finish(); 
            } 
        }); 
        Calendar calendar = Calendar.getInstance();         int year = calendar.get(Calendar.YEAR);         int month = calendar.get(Calendar.MONTH);         int dayOfMonth = calendar.get(Calendar.DAY_OF_MONTH);         int hourOfDay = calendar.get(Calendar.HOUR_OF_DAY); 
        int minute = calendar.get(Calendar.MINUTE);         if (getIntent().getBooleanExtra("view", false) || getIntent().getBooleanExtra("edit", false)){ 
            Note note = notes.get(getIntent().getIntExtra("index", 0));             importanceSpinner.setSelection(note.getImportance());             titleEditTextButton.setText(note.getTitle()); 
            descriptionEditTextButton.setText(note.getDescription());             editTextDate.setText(note.getEventDate());             editTextTime.setText(note.getEventTime()); 
            imageBytes = NoteAdapter.StandartIconCheck(note.getImageData(), this); 
            
iconImageView.setImageBitmap(BitmapFactory.decodeByteArray(imageBytes, 0, imageBytes.length)); 
            if (getIntent().getBooleanExtra("view", false)){                 titleEditTextButton.setEnabled(false);                 descriptionEditTextButton.setEnabled(false);                 descriptionEditTextButton.setHint("");                 editTextDate.setEnabled(false);                 editTextDate.setHint("");                 editTextTime.setEnabled(false);                 editTextTime.setHint("");                 removeTransparency(titleEditTextButton);                 removeTransparency(descriptionEditTextButton);                 removeTransparency(editTextDate);                 removeTransparency(editTextTime); 
                chooseImageButton.setVisibility(View.INVISIBLE);                 importanceSpinner.setEnabled(false); 
                createOrEditButton.setVisibility(View.INVISIBLE); 
            } else { 
                createOrEditButton.setText(getString(R.string.edit)); 
            } 
        } 
 
        chooseImageButton.setOnClickListener(new View.OnClickListener() { 
            @Override 
            public void onClick(View v) { 
                Intent intent = new Intent(Intent.ACTION_GET_CONTENT, MediaStore.Images.Media.EXTERNAL_CONTENT_URI); 
                intent.setType("image/*"); 
                intent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, false); 
                intent.addCategory(Intent.CATEGORY_OPENABLE);                 startActivityForResult(intent, 1); 
            } 
        }); 
 
        createOrEditButton.setOnClickListener(new View.OnClickListener() { 
            @Override 
            public void onClick(View v) { 
                if (titleEditTextButton.getText().toString().isEmpty()){ 
                    AlertDialog.Builder builder = new AlertDialog.Builder(AddEditNoteActivity.this); 
                    builder.setTitle(R.string.incorrectInput);                     builder.setMessage(R.string.noTitle);                     builder.setPositiveButton("Ок", new 
DialogInterface.OnClickListener() { 
                        @Override 
                        public void onClick(DialogInterface dialog, int which) { 
 
                        } 
                    }); 
                    builder.create().show(); 
                    return; 
                } 
 
                if (getIntent().getBooleanExtra("edit", false)){ 
                    Note note = notes.get(getIntent().getIntExtra("index", 0)); 
                    Notes.EditNote( note.getNumber(),                             titleEditTextButton.getText().toString(),                             descriptionEditTextButton.getText().toString(),                             importanceSpinner.getSelectedItemPosition(), 
                            editTextDate.getText().toString(),                             editTextTime.getText().toString(),                             note.getCreationDate(),                             imageBytes); 
                } else { 
                    Notes.AddNote(titleEditTextButton.getText().toString(),                             descriptionEditTextButton.getText().toString(),                             importanceSpinner.getSelectedItemPosition(), 
                            editTextDate.getText().toString(),                             editTextTime.getText().toString(),                             dayOfMonth + "." + month + "." + year,                             imageBytes); 
                } 
                setResult(RESULT_OK); 
                finish(); 
            } 
        }); 
        editTextDate.setOnClickListener(new View.OnClickListener() { 
            @Override 
            public void onClick(View v) { 
                DatePickerDialog datePickerDialog = new 
DatePickerDialog(AddEditNoteActivity.this, new 
DatePickerDialog.OnDateSetListener() { 
                    @Override 
                    public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) { 
                        editTextDate.setText(dayOfMonth + "." + month + "." + year); 
                    } 
                }, year, month, dayOfMonth); 
                datePickerDialog.show(); 
            } 
        }); 
        editTextTime.setOnClickListener(new View.OnClickListener() { 
            @Override 
            public void onClick(View v) { 
                TimePickerDialog timePickerDialog = new 
TimePickerDialog(AddEditNoteActivity.this, new 
TimePickerDialog.OnTimeSetListener() { 
                    @Override 
                    public void onTimeSet(TimePicker view, int hourOfDay, int minute) {                         editTextTime.setText(hourOfDay + ":" + minute); 
                    } 
                }, hourOfDay, minute, true); 
                timePickerDialog.show(); 
            } 
        }); 
    } 
    @Override 
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {         super.onActivityResult(requestCode, resultCode, data);         if (requestCode == 1 && resultCode == RESULT_OK){             iconImageView.setImageURI(data.getData());             try { 
 
                Bitmap bitmap = 
MediaStore.Images.Media.getBitmap(this.getContentResolver(), data.getData()); 
 
                ByteArrayOutputStream stream = new ByteArrayOutputStream();                 bitmap.compress(Bitmap.CompressFormat.PNG, 100, stream);                 imageBytes = stream.toByteArray(); 
 
            } catch (IOException e) {                 e.printStackTrace(); 
            } 
        } 
    } 
    public static void removeTransparency(TextView textView){         int currentColor = textView.getCurrentTextColor(); 
 
        int newColor = (currentColor & 0x00FFFFFF) | (255 << 24); 
 
        textView.setTextColor(newColor); 
    } 
} 
4. DBHelper 
Цей клас відповідає за роботу з базою даних SQLite. Він реалізує основні CRUD-операції: 
onCreate – створює таблицю для нотаток. 
onInsert, onUpdate, onDelete – методи для додавання, оновлення та видалення нотаток. onSelect – отримує всі нотатки з бази даних. 
Filter – фільтрує нотатки за заголовком, описом та важливістю. 
 
public class DBHelper extends SQLiteOpenHelper { 
 
 
    public DBHelper(@Nullable Context context, @Nullable String name, @Nullable SQLiteDatabase.CursorFactory factory, int version) {         super(context, name, factory, version); 
    } 
 
    @SuppressLint("SQLiteString") 
    @Override 
    public void onCreate(SQLiteDatabase db) { 
        db.execSQL("CREATE TABLE notes(number INTEGER PRIMARY KEY 
AUTOINCREMENT, title TEXT, description TEXT," + 
                " importance INTEGER, event_date TEXT, event_time TEXT, creation_date TEXT, image_data BLOB)"); 
    } 
 
    @Override 
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) { 
 
    } 
 
    public void Drop(){ 
        SQLiteDatabase db = getWritableDatabase(); 
        db.execSQL("DROP TABLE notes");         onCreate(db); 
    } 
 
    public void onInsert(String title, String description, int importance, String eventDate, String eventTime, String creationDate, byte[] imageData){ 
        SQLiteDatabase db = getWritableDatabase(); 
        ContentValues contentValues = CreateNote(title, description, importance, 
eventDate, eventTime, creationDate, imageData);         db.insert("notes", null, contentValues); 
    } 
 
    public void onUpdate(int number, String title, String description, int importance, 
String eventDate, String eventTime, String creationDate, byte[] imageData){ 
        SQLiteDatabase db = getWritableDatabase(); 
        ContentValues contentValues = CreateNote(title, description, importance, 
eventDate, eventTime, creationDate, imageData);         db.update("notes", contentValues, "number = ?", new 
String[]{String.valueOf(number)}); 
    } 
 
    public ContentValues CreateNote(String title, String description, int importance, 
String eventDate, String eventTime, String creationDate, byte[] imageData){ 
        ContentValues contentValues = new ContentValues(); 
        contentValues.put("title", title);         contentValues.put("description", description);         contentValues.put("importance", importance);         contentValues.put("event_date", eventDate);         contentValues.put("event_time", eventTime);         contentValues.put("creation_date", creationDate);         contentValues.put("image_data", imageData); 
        return contentValues; 
    } 
 
    public void onDelete(int number){ 
        SQLiteDatabase db = getWritableDatabase(); 
        db.delete("notes", "number = ?", new String[]{String.valueOf(number)}); 
    } 
 
    public Cursor onSelect(){ 
        SQLiteDatabase db = this.getReadableDatabase();         return db.query("notes", null, null, null, null, null, null);     } 
 
    public Cursor Filter(String title, String description, boolean importance, int importanceLayer){ 
        SQLiteDatabase db = this.getReadableDatabase(); 
        String query = "SELECT * FROM notes WHERE (title LIKE ? OR description LIKE ?)"; 
        String[] selectionArgs = new String[]{"%" + title + "%", "%" + description + 
"%"}; 
        if (importance){ 
            query += "AND importance = ?"; 
            selectionArgs = new String[]{"%" + title + "%", "%" + description + "%", String.valueOf(importanceLayer)}; 
        } 
        return db.rawQuery(query, selectionArgs); 
    } 
} 
5. ImportanceAdapter 
Адаптер для спінера, який відображає елементи важливості нотатки. public class ImportanceAdapter extends ArrayAdapter<ImportanceItem> { 
 
    public ImportanceAdapter(@NonNull Context context, List<ImportanceItem> resource) { 
        super(context, 0, resource); 
    } 
 
    @Override 
    public View getView(int position, View convertView, ViewGroup parent){         ImportanceItem item = getItem(position); 
 
        convertView = 
LayoutInflater.from(getContext()).inflate(R.layout.spinner_item, parent, false); 
 
        ImageView imageView = convertView.findViewById(R.id.importanceIcon); 
        TextView textView = 
convertView.findViewById(R.id.importanceTextView); 
 
        if (item.GetImageResId() != null){ 
            imageView.setImageResource(item.GetImageResId()); 
        } 
 
        textView.setText(item.GetTitle()); 
 
        return convertView; 
    } 
 
    @Override 
    public View getDropDownView(int position, View convertView, ViewGroup parent){ 
        return getView(position, convertView, parent); 
    } 
} 
6. MainActivity 
Це головна активність вашого додатка, яка взаємодіє з іншими компонентами, відображаючи нотатки в списку, дозволяючи користувачам шукати та фільтрувати їх за різними параметрами. onCreate(Bundle savedInstanceState): 
* Ініціалізує елементи інтерфейсу користувача, такі як кнопки, спінери, RecyclerView та інші компоненти. 
* Встановлює адаптер для RecyclerView. 
* Додає обробники подій для кнопки нової нотатки, фільтрації за важливістю та пошуку. @Override 
protected void onCreate(Bundle savedInstanceState) { 
    super.onCreate(savedInstanceState);     EdgeToEdge.enable(this); 
    setContentView(R.layout.activity_main); 
    ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> { 
        Insets systemBars = 
insets.getInsets(WindowInsetsCompat.Type.systemBars()); 
        v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);         return insets; 
    }); 
    Notes = ((NotesApplication) getApplication()).GetNotes();     db = Notes.getDBHelper(); 
    Button newNoteButton = findViewById(R.id.newNoteButton);     notesRecycleView = findViewById(R.id.notesRecycleView);     SearchView searchView = findViewById(R.id.noteSearchView);     notesRecycleView.setLayoutManager(new LinearLayoutManager(this));     Notes.updateNotes(); 
    noteAdapter = new NoteAdapter(Notes.getNotes(), this, getApplication());     notesRecycleView.setAdapter(noteAdapter); 
    importanceFilter = findViewById(R.id.importanceFilter);     String[] importanceLevels = new String[]{getString(R.string.all), getString(R.string.lowImportance), getString(R.string.mediumImportance), getString(R.string.highImportance)}; 
    ArrayAdapter<String> arrayAdapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, importanceLevels);     importanceFilter.setAdapter(arrayAdapter);     importanceFilter.setOnItemSelectedListener(new 
AdapterView.OnItemSelectedListener() { 
        @Override 
        public void onItemSelected(AdapterView<?> parent, View view, int position, long id) { 
            Filter(currentSubstring, notesRecycleView, importanceFilter); 
        } 
 
        @Override 
        public void onNothingSelected(AdapterView<?> parent) { 
 
        } 
    }); 
    searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() { 
        @Override 
        public boolean onQueryTextSubmit(String query) {             return true; 
        } 
 
        @Override         public boolean onQueryTextChange(String newText) {             Filter(newText, notesRecycleView, importanceFilter);             currentSubstring = newText; 
            return true; 
        } 
    }); 
    newNoteButton.setOnClickListener(new View.OnClickListener() { 
        @Override 
        public void onClick(View v) { 
            Intent intent = new Intent(MainActivity.this, AddEditNoteActivity.class);             startActivityForResult(intent, 1); 
        } 
    }); 
} 
 
onActivityResult(int requestCode, int resultCode, @Nullable Intent data) 
Оновлює фільтрацію нотаток після того, як нова нотатка була додана або відредагована, та оновлює адаптер. 
@Override 
protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {     super.onActivityResult(requestCode, resultCode, data);     Filter(currentSubstring, notesRecycleView, importanceFilter);     noteAdapter.notifyDataSetChanged(); 
} onContextItemSelected(@NonNull MenuItem item): 
@Override 
public boolean onContextItemSelected(@NonNull MenuItem item) {     if (item.getItemId() == R.id.edit) { 
        Intent intent = new Intent(MainActivity.this, AddEditNoteActivity.class);         intent.putExtra("edit", true);         intent.putExtra("view", false); 
        intent.putExtra("index", noteAdapter.currentIndex); 
        startActivityForResult(intent, 1);     } else if (item.getItemId() == R.id.delete) { 
        if (noteAdapter.currentIndex == -1 || noteAdapter.currentIndex >= 
Notes.getNotes().size()) { 
            Log.e("Error", "Invalid index for deletion");             return super.onContextItemSelected(item); 
        } 
 
        AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);         builder.setTitle(R.string.deleteNote);         builder.setMessage(R.string.deleteConfirmation);         builder.setPositiveButton(R.string.yes, new 
DialogInterface.OnClickListener() { 
            @Override 
            public void onClick(DialogInterface dialog, int which) {                 Notes.DeleteNote(noteAdapter.currentIndex, Notes.getNotes().get(noteAdapter.currentIndex).getNumber());                 noteAdapter.notifyDataSetChanged(); 
            } 
        }); 
        builder.setNegativeButton(R.string.no, null);         builder.create().show(); 
    } 
    return super.onContextItemSelected(item); 
} 
Filter(String newText, RecyclerView notesRecycleView, Spinner importanceFilter): 
Фільтрує список нотаток на основі введеного тексту в пошуку та вибору важливості в спінері. 
Створює новий адаптер для RecyclerView з відфільтрованими нотатками. public void Filter(String newText, RecyclerView notesRecycleView, Spinner importanceFilter) { 
    noteAdapter = new NoteAdapter(Notes.Filter(newText, newText, 
            importanceFilter.getSelectedItemPosition() != 0,             importanceFilter.getSelectedItemPosition() - 1),             this, 
            getApplication() 
    ); 
    notesRecycleView.setAdapter(noteAdapter); 
 
 
    noteAdapter.currentIndex = -1; 
} 
 
4.NoteAdapter 
Адаптер для RecyclerView, який керує відображенням елементів списку нотаток. 
public class NoteAdapter extends 
RecyclerView.Adapter<NoteAdapter.NoteViewHolder> { 
 
    private List<Note> notes; 
    private Context context; 
    public int currentIndex; 
    @NonNull     @Override 
    public NoteViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) { 
        View noteViewHolder = 
LayoutInflater.from(parent.getContext()).inflate(R.layout.note_item, parent, false);         return new NoteViewHolder(noteViewHolder); 
    } 
 
    @Override 
    public void onBindViewHolder(@NonNull NoteViewHolder holder, int position) { 
        Note note = notes.get(position); 
        holder.titleTextView.setText(note.getTitle()); 
        holder.descriptionTextView.setText(note.getDescription()); 
        byte[] imageBytes = StandartIconCheck(note.getImageData(), context); 
        
holder.iconImageView.setImageBitmap(BitmapFactory.decodeByteArray(imageB ytes, 0, imageBytes.length)); 
        int importance = note.getImportance();         int imageSRC;         if (importance == 0){ 
            imageSRC = R.drawable.baseline_low_priority_24; 
        } else if (importance == 1){ 
            imageSRC = R.drawable.baseline_checklist_24; 
        } else { 
            imageSRC = R.drawable.baseline_priority_high_24; 
        } 
        holder.importanceImageView.setImageResource(imageSRC);         holder.creationDateTextView.setText(note.getCreationDate()); 
 
        holder.itemView.setOnCreateContextMenuListener(new 
View.OnCreateContextMenuListener() { 
            @Override 
            public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo) { 
                menu.add(0, R.id.edit, 0, R.string.edit); 
                menu.add(1, R.id.delete, 0, R.string.delete);                 currentIndex = position; 
            } 
        }); 
 
        holder.itemView.setOnClickListener(new View.OnClickListener() { 
            @Override 
            public void onClick(View v) { 
                Intent intent = new Intent(context, AddEditNoteActivity.class);                 intent.putExtra("view", true);                 intent.putExtra("index", position); 
                context.startActivity(intent); 
            } 
        }); 
    } 
 
    @Override     public int getItemCount() {         return notes.size(); 
    } 
 
    public NoteAdapter(List<Note> notes, MainActivity context, Application application){         this.notes = notes; 
        this.context = context; 
    } 
 
    public class NoteViewHolder extends RecyclerView.ViewHolder{         public TextView titleTextView;         public TextView descriptionTextView;         public ImageView iconImageView;         public ImageView importanceImageView;         public TextView creationDateTextView;         public NoteViewHolder(@NonNull View itemView) {             super(itemView); 
            titleTextView = itemView.findViewById(R.id.titleTextView);             descriptionTextView = 
itemView.findViewById(R.id.descriptionTextView); 
            iconImageView = itemView.findViewById(R.id.iconImageView);             importanceImageView = 
itemView.findViewById(R.id.importanceImageView);             creationDateTextView = 
itemView.findViewById(R.id.creationDateTextView); 
        } 
    } 
 
    public static byte[] StandartIconCheck(byte[] imageBytes, Context context){         if (imageBytes == null){ 
            Bitmap bitmap = BitmapFactory.decodeResource(context.getResources(), 
R.drawable.baseline_insert_photo_24); 
            ByteArrayOutputStream stream = new ByteArrayOutputStream();             bitmap.compress(Bitmap.CompressFormat.PNG, 100, stream);             imageBytes = stream.toByteArray(); 
        } 
        return imageBytes; 
    } 
 
} onCreateViewHolder(@NonNull ViewGroup parent, int viewType): 
 
Створює нову View для кожного елемента списку. onBindViewHolder(@NonNull NoteViewHolder holder, int position): 
Встановлює дані для кожного елемента списку (нотатку), включаючи заголовок, опис, зображення, важливість та дату створення. 
Додає контекстне меню для кожного елемента (редагування/видалення). getItemCount(): 
Повертає кількість нотаток у списку. 
StandartIconCheck(byte[] imageBytes, Context context): 
Перевіряє наявність зображення для нотатки. Якщо його немає, встановлює стандартне зображення. 
5. Notes: 
Клас, що відповідає за зберігання та фільтрацію нотаток. updateNotes() 
Оновлює список нотаток, отримуючи їх з бази даних через DBHelper public void updateNotes(){     Cursor cursor = db.onSelect();     CreateNotes(cursor); 
    lastNoteNumber = notes.get(notes.size() - 1).getNumber(); } 
 
AddNote(...): 
Додає нову нотатку до бази даних. 
public void AddNote(String title, String description, int importance, String eventDate, String eventTime, String creationDate, byte[] imageData){     db.onInsert(title, description, importance, eventDate, eventTime, creationDate, imageData); 
} 
EditNote(...): 
Оновлює дані існуючої нотатки в базі даних. 
 
DeleteNote(int index, int number) 
Видаляє нотатку за її номером з бази даних і з місцевого списку нотаток public void EditNote(int number, String title, String description, int importance, String eventDate, String eventTime, String creationDate, byte[] imageData){     db.onUpdate(number, title, description, importance, eventDate, eventTime, creationDate, imageData); 
} 
 
public void DeleteNote(int index, int number){     db.onDelete(number);     notes.remove(index); 
} 
 
Filter(String title, String description, boolean importance, int importanceLayer): 
Виконує фільтрацію нотаток за назвою, описом та важливістю. 
public List<Note> Filter(String title, String description, boolean importance, int importanceLayer){ 
    Cursor cursor = db.Filter(title, description, importance, importanceLayer);     return CreateFilterNotes(cursor); 
} 
CreateFilterNotes(Cursor cursor): 
Перетворює результат запиту бази даних в список фільтрованих нотаток. 
public List<Note> CreateFilterNotes(Cursor cursor){ 
    return CreateNotes(cursor); 
} 
 
public List<Note> CreateNotes(Cursor cursor){     notes.clear(); 
    while (cursor.moveToNext()){ 
        @SuppressLint("Range") int number = cursor.getInt(cursor.getColumnIndex("number"));         @SuppressLint("Range") String title = cursor.getString(cursor.getColumnIndex("title"));         @SuppressLint("Range") String description = cursor.getString(cursor.getColumnIndex("description"));         @SuppressLint("Range") int importance = cursor.getInt(cursor.getColumnIndex("importance"));         @SuppressLint("Range") String eventDate = cursor.getString(cursor.getColumnIndex("event_date"));         @SuppressLint("Range") String eventTime = cursor.getString(cursor.getColumnIndex("event_time"));         @SuppressLint("Range") String creationDate = cursor.getString(cursor.getColumnIndex("creation_date"));         @SuppressLint("Range") byte[] imageBytes = cursor.getBlob(cursor.getColumnIndex("image_data")); 
        notes.add(new Note(number, title, description, importance, eventDate, eventTime, creationDate, imageBytes)); 
    } 
    cursor.close();     return notes; 
} 
CreateNotes(Cursor cursor): 
Створює список нотаток на основі даних з курсора бази даних. NotesApplication: 
Клас Application, що ініціалізує об'єкт Notes і надає його іншим частинам додатка. onCreate(): 
Ініціалізує об'єкт Notes під час запуску додатка. GetNotes(): 
• Повертає об'єкт Notes, який містить всі нотатки. 
 
public class NotesApplication extends Application {     private Notes notes; 
 
    @Override     public void onCreate() {         super.onCreate(); 
        notes = new Notes(this); 
    } 
 
    public Notes GetNotes() { 
        return notes; 
    } 
 
} 
6. NoteUtils 
Утиліти для роботи з SharedPreferences для збереження та завантаження нотаток у вигляді JSON. 
saveNotes(Context context, List<Note> notes): 
 
Зберігає список нотаток у SharedPreferences у вигляді JSON. loadNotes(Context context): 
 
Завантажує список нотаток з SharedPreferences у вигляді JSON. 
clearNotes(Context context): 
 
Очищає збережені нотатки в SharedPreferences. 
 
public class NoteUtils {     private static final String PREF_NAME = "notes_prefs";     private static final String NOTES_KEY = "notes"; 
 
 
    public static void saveNotes(Context context, List<Note> notes) {         SharedPreferences preferences = 
context.getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE); 
        SharedPreferences.Editor editor = preferences.edit(); 
        Gson gson = new Gson();         String json = gson.toJson(notes); 
        editor.putString(NOTES_KEY, json);         editor.apply(); 
    } 
 
 
    public static List<Note> loadNotes(Context context) {         SharedPreferences preferences = 
context.getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE); 
        String json = preferences.getString(NOTES_KEY, "[]"); 
        Gson gson = new Gson(); 
        Type type = new TypeToken<List<Note>>() {}.getType();         return gson.fromJson(json, type); 
    } 
 
 
    public static void clearNotes(Context context) {         SharedPreferences preferences = 
context.getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE);         preferences.edit().clear().apply(); 
    } 
} 
Реалізація стилів 
<resources>
    <style name="purpleStyle">
        <item name="android:windowBackground">@color/purple</item>
    </style>
    <style name="greenStyle">
        <item name="android:windowBackground">@color/green</item>
    </style>
    <style name="smallFontSize">
        <item name="android:textSize">12sp</item>
    </style>
    <style name="mediumFontSize">
        <item name="android:textSize">16sp</item>
    </style>
    <style name="largeFontSize">
        <item name="android:textSize">20sp</item>
    </style>

    <!-- Fullscreen container theme -->
    <style name="Theme.LabTask5.FullscreenContainer" parent="Theme.AppCompat.Light.DarkActionBar">
        <item name="android:windowFullscreen">true</item>
        <item name="android:windowNoTitle">true</item>
    </style>


</resources>
Висновок: Під час виконання лабораторної роботи №5 я навчився реалізовувати різні стилі та динамічно їх змінювати, а також адаптувати розмітку для різних орієнтацій екрану за допомогою фрагментів та зберігати дані в базі даних.
 



 







